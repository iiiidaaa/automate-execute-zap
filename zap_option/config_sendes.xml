<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.8"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.8">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>COPY_SOURCE_PROJECT</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>COPY_SOURCE_PROJECT</name>
          <description>ZAP_JOB</description>
          <defaultValue>ZAP_EXAMPLE_JOB</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.68">
    <script>pipeline {
  agent any
  parameters {
    string(
      name: &apos;COPY_SOURCE_PROJECT&apos;,
      defaultValue: &quot;ZAP_EXAMPLE_JOB&quot;,
      description: &apos;ZAP_JOB&apos;
    )
  }
  stages {
    stage(&apos;execZAP&apos;){
      steps {
        build job: &apos;ZAP_EXAMPLE_JOB&apos;
      }
    }
    stage(&apos;copy artifacts&apos;) {
      steps {
        copyArtifacts(projectName: &quot;${params.COPY_SOURCE_PROJECT}&quot;)
      }
    }

    stage(&apos;find files&apos;) {

      steps {
        script {
          files = findFiles(glob :&quot;**/*.json&quot;)
          file_path = &quot;&quot;
          for (file in files) {
            echo file.path
            file_path = file.path
            def props = readJSON file: file.path
          }
          res = sh(script: &quot;python3 ~/scripts/sendJson.py ${file_path}&quot;, returnStdout: true)
          echo &quot;${res}&quot;
        }
      }
    }
  }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
